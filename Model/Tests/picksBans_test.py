
# Generated by CodiumAI
from unittest.mock import MagicMock
import os
import sys

sys.path.insert(0, 'Code')

from Code.Web_scrap import Scraping
from Code.PicksBans import getDF_picksBans
import pandas as pd

import unittest

"""
Code Analysis

Objective:
- The objective of the function is to obtain all the picks and bans data from a specific league and season, and transform it into a pandas DataFrame. It also has the option to download the resulting DataFrame as a CSV file.

Inputs:
- league (str): the name of the league to obtain the data from.
- season (str): the year of the season to obtain the data from.
- download (bool, optional): a flag to indicate whether to download the resulting DataFrame as a CSV file.

Flow:
- The function first calls the Scraping.games() method to obtain all the links to the picks and bans data for the specified league and season.
- It then iterates over each link, calling the picksBans() method to extract the picks and bans data from the JSON obtained from the link.
- The resulting DataFrame from each iteration is concatenated to a final DataFrame.
- The final DataFrame is then saved as a CSV file if the download flag is set to True.

Outputs:
- pd.DataFrame: the resulting DataFrame containing all the picks and bans data for the specified league and season.

Additional aspects:
- The function uses the tqdm library to display a progress bar while iterating over the links.
- The function also inserts a 'Season' column to the resulting DataFrame to indicate the season of the data.
- The function uses the Scraping.getJson() method to obtain the JSON data from each link.
"""

class TestGetdfPicksbans(unittest.TestCase):
    # Tests that the function works properly with valid input values for league and season parameters.
    def test_valid_input_values(self):
        # Mocking Scraping.games() to return valid data
        Scraping.games = MagicMock(return_value=(["Spring"], ["Week 1"], ["Team A"], ["Team B"], ["https://example.com"]))
        # Calling the function with valid input values
        df = getDF_picksBans("LCS", "2022")
        # Asserting that the returned dataframe is not empty
        self.assertFalse(df.empty)

    # Tests that the function generates properly the csv file if download parameter is True.
    def test_csv_file(self):
        # Mocking Scraping.games() to return valid data
        Scraping.games = MagicMock(return_value=(["Spring"], ["Week 1"], ["Team A"], ["Team B"], ["https://example.com"]))
        # Calling the function with download parameter set to True
        getDF_picksBans("LCS", "2022", True)
        # Asserting that the csv file was generated
        self.assertTrue(os.path.exists("Download\\Picks&Bans-LCS_2022.csv"))

    # Tests that the function handles properly the case of empty data returned from the website.
    def test_empty_data(self):
        # Mocking Scraping.games() to return empty data
        Scraping.games = MagicMock(return_value=([], [], [], [], []))
        # Calling the function with valid input values
        df = getDF_picksBans("", "")
        # Asserting that the returned dataframe is empty
        self.assertTrue(df.empty)

    # Tests that the function handles properly the case of invalid input values for league and season parameters.
    def test_invalid_input_values(self):
        # Mocking Scraping.games() to return empty data
        Scraping.games = MagicMock(return_value=([], [], [], [], []))
        # Calling the function with invalid input values
        df = getDF_picksBans("InvalidLeague", "InvalidSeason")
        # Asserting that the returned dataframe is empty
        self.assertTrue(getDF_picksBans("InvalidLeague", "InvalidSeason").empty)


    # Tests that the function handles properly the case of large amount of data causing memory issues.
    def test_large_data(self):
        # Mocking Scraping.games() to return a large amount of data
        Scraping.games = MagicMock(return_value=(["Spring"]*1000, ["Week 1"]*1000, ["Team A"]*1000, ["Team B"]*1000, ["https://example.com"]*1000))
        # Calling the function with valid input values
        df = getDF_picksBans("LCS", "2022")
        # Asserting that the returned dataframe is not empty
        self.assertFalse(df.empty)

if __name__ == '__main__':
    unittest.main()